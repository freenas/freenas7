#!/bin/sh
# Copyright (c) 2008-2009 Volker Theile (votdev@gmx.de)
# All rights reserved.

# PROVIDE: proftpd
# REQUIRE: DAEMON
# BEFORE: LOGIN
# KEYWORD: shutdown
# XQUERY: -i "count(//ftpd/enable) > 0" -o "0" -b
# RCVAR: proftpd

. /etc/rc.subr
. /etc/util.subr
. /etc/configxml.subr

name="proftpd"
rcvar=`set_rcvar`

load_rc_config "$name"

# Custom commands
extra_commands="mkconf"
mkconf_cmd="mkconf_cmd"
start_precmd="mkconf_cmd"

# Defaults
proftpd_enable=${proftpd_enable:-"NO"}
proftpd_flags=${proftpd_flags:-""}
proftpd_config=${proftpd_config:-"/var/etc/${name}.conf"}
proftpd_delaytable=${proftpd_delaytable:-"/var/run/${name}/${name}.delay"}
proftpd_displaylogin=${proftpd_displaylogin:-"/var/run/${name}/${name}.motd"}
proftpd_tlsrsacertfile=${proftpd_tlsrsacertfile:-"/var/etc/ssl/private/${name}.cert"}
proftpd_tlsrsakeyfile=${proftpd_tlsrsakeyfile:-"/var/etc/ssl/private/${name}.key"}
proftpd_tcpaccessfilesallow=${proftpd_tcpaccessfilesallow:-"/etc/hosts.allow"}
proftpd_tcpaccessfilesdeny=${proftpd_tcpaccessfilesdeny:-"/etc/hosts.allow"}
proftpd_umaskfile=${proftpd_umaskfile:-"077"}
proftpd_umaskdirectory=${proftpd_umaskdirectory:-"022"}
proftpd_maxinstances=${proftpd_maxinstances:-"none"}
proftpd_defaulttransfermode=${proftpd_defaulttransfermode:-"ascii"}
proftpd_deferwelcome=${proftpd_deferwelcome:-"off"}
proftpd_anonymousrootdir=${proftpd_anonymousrootdir:-"/mnt"}
proftpd_multilinerfc2228=${proftpd_multilinerfc2228:-"off"}
proftpd_timeoutlogin=${proftpd_timeoutlogin:-"300"}
proftpd_timeoutnotransfer=${proftpd_timeoutnotransfer:-"300"}
proftpd_timeoutstalled=${proftpd_timeoutstalled:-"3600"}
proftpd_defaultrootdir=${proftpd_defaultrootdir:-"~"}
proftpd_defaultrootgroupexpr=${proftpd_defaultrootgroupexpr:-"!wheel"}
proftpd_requirevalidshell=${proftpd_requirevalidshell:-"off"}
proftpd_deleteabortedstores=${proftpd_deleteabortedstores:-"off"}
proftpd_tlsverifyclient=${proftpd_tlsverifyclient:-"off"}
proftpd_tlsoptions=${proftpd_tlsoptions:-"NoCertRequest"}
proftpd_tlsprotocol=${proftpd_tlsprotocol:-"SSLv23"}
proftpd_tlsrequired=${proftpd_tlsrequired:-"on"}
proftpd_tcpaccesssysloglevels=${proftpd_tcpaccesssysloglevels:-"info warn"}
proftpd_tcpservicename=${proftpd_tcpservicename:-"ftpd"}
proftpd_moddelay_enable=${proftpd_moddelay_enable:-"YES"}
proftpd_modwrap_enable=${proftpd_modwrap_enable:-"YES"}
command="/usr/local/sbin/${name}"
command_args="--config ${proftpd_config}"
pidfile="/var/run/${name}.pid"

# Check if required directories exists.
[ ! -d "/var/run/${name}" ] && mkdir "/var/run/${name}"

# Check if required files exists.
[ ! -e "${proftpd_delaytable}" ] && cat /dev/null > "${proftpd_delaytable}"
[ ! -e "${proftpd_tcpaccessfilesallow}" ] && cat /dev/null > "${proftpd_tcpaccessfilesallow}"
[ ! -e "${proftpd_tcpaccessfilesdeny}" ] && cat /dev/null > "${proftpd_tcpaccessfilesdeny}"

mkconf_cmd()
{
	local _welcomemsg _productname _certificate _privatekey _tmpfile

	# Create welcome message file
	_welcomemsg=`configxml_get "//ftpd/banner"`
	if [ -z "${_welcomemsg}" ]; then
		_productname=`get_product_name`
		echo "Welcome to ${_productname} FTP Server" > ${proftpd_displaylogin}
	else
		echo ${_welcomemsg} > ${proftpd_displaylogin}
	fi

	# Create SSL/TLS certificate
	if configxml_isset //ftpd/tls; then
		_certificate=`configxml_get "//ftpd/certificate"`
		_privatekey=`configxml_get "//ftpd/privatekey"`

		# Create certificate and key files
		if [ -n "${_certificate}" -a -n "${_privatekey}" ]; then
			_tmpfile=/tmp/${name}$$.tmp

			echo "${_certificate}" > ${_tmpfile}
			/usr/bin/uudecode -m -p -r ${_tmpfile} > ${proftpd_tlsrsacertfile}
			/bin/chmod 0600 ${proftpd_tlsrsacertfile}

			echo "${_privatekey}" > ${_tmpfile}
			/usr/bin/uudecode -m -p -r ${_tmpfile} > ${proftpd_tlsrsakeyfile}
			/bin/chmod 0600 ${proftpd_tlsrsakeyfile}

			/bin/rm -f ${_tmpfile}
		fi
	fi

	/usr/local/bin/xml sel -t \
		-v "concat('ServerName &quot;',//system/hostname,' FTP Server&quot;')" -n \
		-o "ServerType standalone" -n \
		-o "DefaultServer on" -n \
		-v "concat('DefaultAddress ',//system/hostname)" -n \
		-o "UseIPv6 on" -n \
		-m "//ftpd" \
		-v "concat('Port ',port)" -n \
		-o "User nobody" -n \
		-o "Group nogroup" -n \
		-i "string-length(filemask) > 0 and string-length(directorymask) > 0" -v "concat('Umask ',filemask,' ',directorymask)" -n -b \
		-i "string-length(filemask) > 0 and string-length(directorymask) = 0" -v "concat('Umask ',filemask,' ${proftpd_umaskdirectory}')" -n -b \
		-i "string-length(filemask) = 0 and string-length(directorymask) > 0" -v "concat('Umask ${proftpd_umaskfile} ',directorymask)" -n -b \
		-i "string-length(filemask) = 0 and string-length(directorymask) = 0" -o "Umask ${proftpd_umaskfile} ${proftpd_umaskdirectory}" -n -b \
		-o "SyslogFacility ftp" -n \
		-o "MultilineRFC2228 ${proftpd_multilinerfc2228}" -n \
		-o "DisplayLogin ${proftpd_displaylogin}" -n \
		-o "DeferWelcome ${proftpd_deferwelcome}" -n \
		-i "timeout[. > 0]" -v "concat('TimeoutIdle ',timeout)" -n -b \
		-o "TimeoutLogin ${proftpd_timeoutlogin}" -n \
		-o "TimeoutNoTransfer ${proftpd_timeoutnotransfer}" -n \
		-o "TimeoutStalled ${proftpd_timeoutstalled}" -n \
		-o "MaxInstances ${proftpd_maxinstances}" -n \
		-v "concat('MaxClients ',numberclients)" -n \
		-i "maxconperip[. > 0]" -v "concat('MaxConnectionsPerHost ',maxconperip)" -n -b \
		-o "DefaultTransferMode ${proftpd_defaulttransfermode}" -n \
		-i "count(fxp) > 0" -o "AllowForeignAddress on" -n -b \
		-i "string-length(pasv_address) > 0" -v "concat('MasqueradeAddress ',pasv_address)" -n -b \
		-i "pasv_min_port[. != '0'] and pasv_max_port[. != '0']" -v "concat('PassivePorts ',pasv_min_port,' ',pasv_max_port)" -n -b \
		-i "count(identlookups) > 0" -o "IdentLookups on" -n -b \
		-i "count(identlookups) = 0" -o "IdentLookups off" -n -b \
		-i "count(usereversedns) > 0" -o "UseReverseDNS on" -n -b \
		-i "count(usereversedns) = 0" -o "UseReverseDNS off" -n -b \
		-i "count(localusersonly) = 0" \
			-n \
			-o "&lt;Anonymous ${proftpd_anonymousrootdir}&gt;" -n \
			-o "  User ftp" -n \
			-o "  Group ftp" -n \
			-o "  UserAlias anonymous ftp" -n \
			-i "string-length(anonymousbandwidth/up) > 0" -v "concat('  TransferRate STOR ',anonymousbandwidth/up)" -n -b \
			-i "string-length(anonymousbandwidth/down) > 0" -v "concat('  TransferRate RETR ',anonymousbandwidth/down)" -n -b \
			-i "count(anonymousonly) > 0" \
				-o "  &lt;Limit LOGIN&gt;" -n \
				-o "    AllowAll" -n \
				-o "  &lt;/Limit&gt;" -n \
			-b \
			-o "&lt;/Anonymous&gt;" -n \
		-b \
		-n \
		-o "&lt;Global&gt;" -n \
		-o "  RequireValidShell ${proftpd_requirevalidshell}" -n \
		-i "count(chrooteveryone) > 0" -o "  DefaultRoot ${proftpd_defaultrootdir} ${proftpd_defaultrootgroupexpr}" -n -b \
		-i "count(permitrootlogin) > 0" -o "  RootLogin on" -n -b \
		-o "  AllowOverwrite on" -n \
		-i "count(allowrestart) > 0" \
			-o "  AllowRetrieveRestart on" -n \
			-o "  AllowStoreRestart on" -n \
		-b \
		-o "  DeleteAbortedStores ${proftpd_deleteabortedstores}" -n \
		-i "string-length(userbandwidth/up) > 0" -v "concat('  TransferRate STOR ',userbandwidth/up)" -n -b \
		-i "string-length(userbandwidth/down) > 0" -v "concat('  TransferRate RETR ',userbandwidth/down)" -n -b \
		-o "&lt;/Global&gt;" -n \
		-i "count(anonymousonly) > 0" \
			-n \
			-o "&lt;Limit LOGIN&gt;" -n \
			-i "count(permitrootlogin) > 0" -o "  AllowGroup wheel" -n -b \
			-o "  DenyAll" -n \
			-o "&lt;/Limit&gt;" -n \
		-b \
		-i "count(tls) > 0" \
			-n \
			-o "&lt;IfModule mod_tls.c&gt;" -n \
			-o "  TLSEngine on" -n \
			-o "  TLSProtocol ${proftpd_tlsprotocol}" -n \
			-o "  TLSOptions ${proftpd_tlsoptions}" -n \
			-o "  TLSRSACertificateFile ${proftpd_tlsrsacertfile}" -n \
			-o "  TLSRSACertificateKeyFile ${proftpd_tlsrsakeyfile}" -n \
			-o "  TLSVerifyClient ${proftpd_tlsverifyclient}" -n \
			-i "count(tlsrequired) > 0" \
				-o "  TLSRequired ${proftpd_tlsrequired}" -n \
			-b \
			-o "&lt;/IfModule&gt;" -n \
		-b \
		-m "auxparam" \
				-v "." -n \
		-b \
		${configxml_file} | /usr/local/bin/xml unesc > ${proftpd_config}

		# Add mod_delay
		if checkyesno proftpd_moddelay_enable; then
			cat <<EOF >> ${proftpd_config}
<IfModule mod_delay.c>
  DelayEngine on
  DelayTable "${proftpd_delaytable}"
</IfModule>

EOF
		fi

		# Add mod_wrap
		if checkyesno proftpd_modwrap_enable; then
			cat <<EOF >> ${proftpd_config}
<IfModule mod_wrap.c>
  TCPAccessFiles ${proftpd_tcpaccessfilesallow} ${proftpd_tcpaccessfilesdeny}
  TCPAccessSyslogLevels ${proftpd_tcpaccesssysloglevels}
  TCPServiceName ${proftpd_tcpservicename}
</ifModule>

EOF
		fi
}

run_rc_command "$1"
