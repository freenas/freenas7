#!/bin/sh
# Copyright (c) 2007-2009 Volker Theile (votdev@gmx.de)
# All rights reserved.

# PROVIDE: lighttpd
# REQUIRE: htpasswd DAEMON
# KEYWORD: shutdown

. /etc/rc.subr
. /etc/configxml.subr

name="lighttpd"
rcvar=`set_rcvar`

load_rc_config "${name}"

# Custom commands
start_precmd="lighttpd_mkconf"
stop_postcmd="lighttpd_poststop"
restart_precmd="lighttpd_check"
reload_precmd="lighttpd_prereload"
reload_postcmd="lighttpd_postreload"
mkconf_cmd="lighttpd_mkconf"
check_cmd="lighttpd_check"
extra_commands="reload check mkconf"

# Defaults
lighttpd_enable=${lighttpd_enable:-"NO"}
lighttpd_conf=${lighttpd_conf:-"/var/etc/lighttpd.conf"}
lighttpd_certpem=${lighttpd_certpem:-"/var/etc/cert.pem"}
lighttpd_docroot=${lighttpd_docroot:-"/usr/local/www"}
lighttpd_server_maxwriteidle=${lighttpd_server_maxwriteidle:-"360"}
lighttpd_pidfile=${lighttpd_pidfile:-"/var/run/${name}.pid"}
command=/usr/local/sbin/lighttpd
command_args="-f ${lighttpd_conf} -m /usr/local/lib/lighttpd"
pidfile=${lighttpd_pidfile}
sig_reload="-INT"

# Create symlink for lighttpd file upload if it doesn't exist.
if [ ! -h "/var/tmp" ]; then
	ln -s /ftmp /var/tmp
fi

lighttpd_mkconf()
{
	local _protocol _certificate _privatekey _tmpfile

	# Create lighttpd.conf file
	cat <<EOF > ${lighttpd_conf}
server.modules = (
  "mod_access",
  "mod_auth",
  "mod_cgi" )
server.document-root = "${lighttpd_docroot}"
server.errorlog-use-syslog = "enable"
server.event-handler = "freebsd-kqueue"
server.max-write-idle = ${lighttpd_server_maxwriteidle}
index-file.names = ( "index.php" )
mimetype.assign = (
  ".pdf"     => "application/pdf",
  ".sig"     => "application/pgp-signature",
  ".spl"     => "application/futuresplash",
  ".class"   => "application/octet-stream",
  ".ps"      => "application/postscript",
  ".torrent" => "application/x-bittorrent",
  ".dvi"     => "application/x-dvi",
  ".gz"      => "application/x-gzip",
  ".pac"     => "application/x-ns-proxy-autoconfig",
  ".swf"     => "application/x-shockwave-flash",
  ".tar.gz"  => "application/x-tgz",
  ".tgz"     => "application/x-tgz",
  ".tar"     => "application/x-tar",
  ".zip"     => "application/zip",
  ".mp3"     => "audio/mpeg",
  ".m3u"     => "audio/x-mpegurl",
  ".wma"     => "audio/x-ms-wma",
  ".wax"     => "audio/x-ms-wax",
  ".ogg"     => "application/ogg",
  ".wav"     => "audio/x-wav",
  ".gif"     => "image/gif",
  ".jpg"     => "image/jpeg",
  ".jpeg"    => "image/jpeg",
  ".png"     => "image/png",
  ".xbm"     => "image/x-xbitmap",
  ".xpm"     => "image/x-xpixmap",
  ".xwd"     => "image/x-xwindowdump",
  ".css"     => "text/css",
  ".html"    => "text/html",
  ".htm"     => "text/html",
  ".js"      => "text/javascript",
  ".asc"     => "text/plain",
  ".c"       => "text/plain",
  ".cpp"     => "text/plain",
  ".log"     => "text/plain",
  ".conf"    => "text/plain",
  ".text"    => "text/plain",
  ".txt"     => "text/plain",
  ".dtd"     => "text/xml",
  ".xml"     => "text/xml",
  ".mpeg"    => "video/mpeg",
  ".mpg"     => "video/mpeg",
  ".mov"     => "video/quicktime",
  ".qt"      => "video/quicktime",
  ".avi"     => "video/x-msvideo",
  ".asf"     => "video/x-ms-asf",
  ".asx"     => "video/x-ms-asf",
  ".wmv"     => "video/x-ms-wmv",
  ".bz2"     => "application/x-bzip",
  ".tbz"     => "application/x-bzip-compressed-tar",
  ".tar.bz2" => "application/x-bzip-compressed-tar"
)
url.access-deny = ( "~", ".inc", ".htpasswd" )
static-file.exclude-extensions = ( ".php", ".pl", ".fcgi" )
server.pid-file = "${pidfile}"
auth.backend = "htpasswd"
auth.backend.htpasswd.userfile = "${lighttpd_docroot}/.htpasswd"
cgi.assign = (".php" => "/usr/local/bin/php")
EOF

	/usr/local/bin/xml sel -t \
		-o "auth.require = ( &quot;/&quot; => (" -n \
		-o "  &quot;method&quot;  => &quot;basic&quot;," -n \
		-v "concat('  &quot;realm&quot;   => &quot;',//system/hostname,'&quot;,')" -n \
		-o "  &quot;require&quot; => &quot;valid-user&quot;" -n \
		-o "  )," -n \
		-o ")" -n \
		-i "string-length(//system/webgui/port) > 0" -v "concat('server.port = ',//system/webgui/port)" -n -b \
		-i "//system/webgui/protocol[. = 'https']" \
			-o "ssl.engine = &quot;enable&quot;" -n \
			-o "ssl.pemfile = &quot;${lighttpd_certpem}&quot;" -n \
		-b \
		${configxml_file} | /usr/local/bin/xml unesc >> ${lighttpd_conf}

	_protocol=`configxml_get "//system/webgui/protocol"`
	_certificate=`configxml_get "//system/webgui/certificate"`
	_privatekey=`configxml_get "//system/webgui/privatekey"`

	if [ "${_protocol}" = "https" ]; then
		# Create /var/etc/cert.pem file
		if [ -n "${_certificate}" -a -n "${_privatekey}" ]; then
			_tmpfile=/tmp/lighttpd$$.tmp

			echo "${_certificate}" > ${_tmpfile}
			/usr/bin/uudecode -m -p -r ${_tmpfile} > ${lighttpd_certpem}
			echo "" >> ${lighttpd_certpem}
			echo "${_privatekey}" > ${_tmpfile}
			/usr/bin/uudecode -m -p -r ${_tmpfile} >> ${lighttpd_certpem}

			/bin/rm -f ${_tmpfile}
		fi

		[ -e ${lighttpd_certpem} ] && /bin/chmod 0600 ${lighttpd_certpem}
	fi
}

lighttpd_check()
{
	echo "Performing sanity check on ${name} configuration:"
	eval "${command} ${command_args} -t"
}

lighttpd_poststop()
{
	rm -f ${pidfile}
}

lighttpd_prereload()
{
	echo "Stopping ${name} and starting gracefully."
}

lighttpd_postreload()
{
	rm -f ${pidfile}
	run_rc_command start
}

run_rc_command "$1"
