#!/bin/sh
# Copyright (c) 2006-2009 Volker Theile (votdev@gmx.de)
# All rights reserved.

# PROVIDE: transmission
# REQUIRE: DAEMON
# KEYWORD: shutdown
# XQUERY: -i "count(//bittorrent/enable) > 0" -o "0" -b
# RCVAR: transmission

. /etc/rc.subr
. /etc/util.subr
. /etc/configxml.subr

name="transmission"
rcvar=`set_rcvar`

load_rc_config "${name}"

# Custom commands
start_precmd="transmission_prestart"
start_postcmd="transmission_poststart"
updateblocklist_cmd="transmission_updateblocklist"
extra_commands="updateblocklist"

# Defaults
transmission_enable=${transmission_enable:-"NO"}
transmission_allowed=${transmission_allowed:-"*.*.*.*"}
transmission_blocklist=${transmission_blocklist:-"NO"}
transmission_blocklist_url=${transmission_blocklist_url:-"http://update.transmissionbt.com/level1.gz"}
transmission_user=${transmission_user:-"transmission"}
transmission_umask=${transmission_umask:-"0002"}

command="/usr/local/bin/${name}-daemon"
command_args="--allowed ${transmission_allowed}"

transmission_prestart()
{
	local _command_args _umask

	# Create command args line.
	_command_args=`/usr/local/bin/xml sel -t -m "//bittorrent" \
		-i "count(authrequired) > 0" \
			-o " --auth" \
			-v "concat(' --username ',username)" \
			-v "concat(' --password &quot;',password,'&quot;')" \
		-b \
		-i "count(authrequired) = 0" -o " --no-auth" -b \
		-v "concat(' --download-dir &quot;',downloaddir,'&quot; --port ',port)" \
		-i "string-length(configdir) > 0" -v "concat(' --config-dir &quot;',configdir,'&quot;')" -b \
		-v "concat(' --peerport=',peerport)" \
		-i "count(portforwarding) > 0" -o " --portmap" -b \
		-i "count(portforwarding) = 0" -o " --no-portmap" -b \
		-i "string-length(watchdir) > 0" -v "concat(' --watch-dir=',watchdir)" -b \
		-i "string-length(watchdir) = 0" -o " --no-watch-dir" -b \
		-i "string-length(extraoptions) > 0" -v "concat(' ',extraoptions)" -b \
		${configxml_file} | /usr/local/bin/xml unesc`

	if checkyesno transmission_blocklist; then
		_command_args="${_command_args} --blocklist"
	else
		_command_args="${_command_args} --no-blocklist"
	fi

	command_args="${command_args} ${_command_args}"

	# Set the umask.
	_umask=`configxml_get "//bittorrent/umask"`
	_umask=${_umask:-"${transmission_umask}"}

	umask ${_umask}
}

transmission_poststart()
{
	local _command_args

	_command_args=`/usr/local/bin/xml sel -t -m "//bittorrent" \
		-i "count(pex) > 0" -o " --pex" -b \
		-i "count(pex) = 0" -o " --no-pex" -b \
		-i "encryption[. = '0']" -o " --encryption-tolerated" -b \
		-i "encryption[. = '1']" -o " --encryption-preferred" -b \
		-i "encryption[. = '2']" -o " --encryption-required" -b \
		-i "string-length(uplimit) > 0" -v "concat(' --uplimit=',uplimit)" -b \
		-i "string-length(uplimit) = 0" -o " --no-uplimit" -b \
		-i "string-length(downlimit) > 0" -v "concat(' --downlimit=',downlimit)" -b \
		-i "string-length(downlimit) = 0" -o " --no-downlimit" -b \
		-i "count(authrequired) > 0" \
			-v "concat(' --auth=',username,':',password)" \
		-b \
		${configxml_file} | /usr/local/bin/xml unesc`

	sleep 1; transmission-remote ${_command_args} >/dev/null 2>&1
}

transmission_updateblocklist()
{
	local _configdir _md5 _file

	# Get the configuration directory.
	_configdir=`configxml_get "//bittorrent/configdir"`
	[ -z "${_configdir}" ] && _configdir="${HOME}/.config/${name}-daemon"

	# Check if blocklists folder exists, create it if necessary. Then
	# change directory.
	[ ! -e "${_configdir}/blocklists" ] && mkdir "${_configdir}/blocklists"
	cd "${_configdir}/blocklists"

	# Download blocklist file.
	_file=${transmission_blocklist_url##*/}
	[ -f "${_file}" ] && _md5=$(md5 -q "${_file}")
	fetch -ampw 5 "${transmission_blocklist_url}"
	if [ 0 -ne $? ]; then
		logger -s -t "${name}" "Failed to fetch blocklist ${transmission_blocklist_url}"
		exit 1
	fi

	# Has the file been updated?
	if [ "$(md5 -q ${_file})" = "${_md5:=0}" ]; then
		logger -s -t "${name}" "Blocklist is up-to-date"
		exit 1
	fi

	# Extract file content.
	gzip -dfkq ${_file};
	if [ 0 -ne $? ]; then
		logger -s -t "${name}" "Failed to extract blocklist update"
		exit 1
	fi

	logger -s -t "${name}" "Blocklist has been updated successful"
}

run_rc_command "$1"
